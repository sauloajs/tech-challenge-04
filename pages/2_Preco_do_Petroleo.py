import streamlit as st
import pandas as pd

import numpy as np
import matplotlib.pyplot as plt

from src.data.ipea_data import df

st.set_page_config(layout="wide", page_title='An√°lise de Monte Carlo', page_icon='üìà')

tab1, tab2, tab3 = st.tabs(['Pre√ßo do Petr√≥leo', 'Proje√ß√£o do Pre√ßo do Petr√≥leo', 'Distribui√ß√£o'])

# Calculando os retornos logar√≠tmicos dos pre√ßos
df['Log_Return'] = np.log(df['Preco'] / df['Preco'].shift(1))

# Calculando a m√©dia e o desvio padr√£o dos retornos logar√≠tmicos
mu = df['Log_Return'].mean()
sigma = df['Log_Return'].std()

# Definindo os par√¢metros para a simula√ß√£o de Monte Carlo
num_simulations = 1000  # N√∫mero de simula√ß√µes a serem realizadas
num_days = 252  # N√∫mero de dias para simular, aproximadamente um ano de negocia√ß√£o

# Criando um array para armazenar as simula√ß√µes
simulations = np.zeros((num_simulations, num_days))

# Realizando as simula√ß√µes
np.random.seed(42)  # Semente para reprodutibilidade
for i in range(num_simulations):
    # Gerando os choques aleat√≥rios para os retornos
    random_shocks = np.random.normal(mu, sigma, num_days)
    # Criando o caminho de pre√ßo para cada simula√ß√£o
    price_series = [df['Preco'].iloc[-1]]  # Iniciando com o √∫ltimo pre√ßo conhecido
    for shock in random_shocks:
        price_series.append(price_series[-1] * np.exp(shock))

    # Corre√ß√£o: Armazenando a simula√ß√£o sem o primeiro elemento (√∫ltimo pre√ßo conhecido)
    simulations[i, :] = price_series[1:]

# Convertendo as simula√ß√µes para um DataFrame para facilitar a an√°lise
simulations_df = pd.DataFrame(simulations)


with tab1: 
    st.write('O c√≥digo e as imagens resultantes da Simula√ß√£o de Monte Carlo para pre√ßos de petr√≥leo indicam uma tend√™ncia ascendente de pre√ßos ao longo do tempo, conforme visualizado nas trajet√≥rias simuladas. A primeira imagem apresenta uma variedade de caminhos poss√≠veis, sugerindo um aumento na incerteza √† medida que o horizonte de tempo se estende, uma caracter√≠stica t√≠pica do mercado de petr√≥leo, onde as previs√µes se tornam menos precisas quanto mais distantes no futuro.')
    
    plt.figure(figsize=(10, 5))
    plt.plot(simulations_df.T, alpha=0.2, color='blue')
    plt.title('Simula√ß√£o de Monte Carlo para o Pre√ßo do Petr√≥leo')
    plt.xlabel('Dias')
    plt.ylabel('Pre√ßo Simulado')
    plt.show()

    st.pyplot(plt)


with tab2:
    st.write('Na segunda imagem, a inclus√£o de medidas como a m√©dia e a mediana, juntamente com o intervalo de confian√ßa, resume as proje√ß√µes, fornecendo indicadores claros para os pre√ßos esperados e a variabilidade em torno desses valores. Este resumo estat√≠stico √© fundamental para a tomada de decis√£o estrat√©gica, j√° que destaca tanto a dire√ß√£o geral esperada dos pre√ßos quanto a incerteza associada a essa proje√ß√£o.')
    # Defina o n√≠vel de confian√ßa
    confidence_level = 0.95

    # Calcule o VaR
    sorted_simulations = np.sort(simulations, axis=0)
    index_at_confidence_level = int((1-confidence_level) * num_simulations)
    VaR_95 = sorted_simulations[index_at_confidence_level, -1] - df['Preco'].iloc[-1]

    # Exiba o VaR
    # print(f"O VaR a {confidence_level*100}% para o pre√ßo do petr√≥leo √© ${-VaR_95:.2f}.")
    # print(f"Isto significa que h√° uma chance de {100-confidence_level*100}% de perder mais de ${-VaR_95:.2f} no pr√≥ximo ano.")

    # Calcular a m√©dia esperada para cada dia
    mean_projection = simulations_df.mean(axis=0)

    # Calcular a mediana para cada dia
    median_projection = simulations_df.median(axis=0)

    # Calcular os quantis para intervalos de confian√ßa de 95%
    lower_quantile = simulations_df.quantile(0.025, axis=0)
    upper_quantile = simulations_df.quantile(0.975, axis=0)

    # Plotar a proje√ß√£o
    plt.figure(figsize=(10, 5))

    # Proje√ß√£o m√©dia
    plt.plot(mean_projection, label='M√©dia', color='black')

    # Mediana da proje√ß√£o
    plt.plot(median_projection, label='Mediana', color='red')

    # Intervalo de confian√ßa de 95%
    plt.fill_between(range(num_days), lower_quantile, upper_quantile, color='blue', alpha=0.1, label='Intervalo de Confian√ßa de 95%')

    # Detalhes do gr√°fico
    plt.title('Proje√ß√£o de Pre√ßo do Petr√≥leo - Simula√ß√£o de Monte Carlo')
    plt.xlabel('Dias')
    plt.ylabel('Pre√ßo Projetado')
    plt.legend()

    st.pyplot(plt)


with tab3:
    st.write('O c√≥digo executa simula√ß√µes estoc√°sticas para modelar o comportamento do pre√ßo do petr√≥leo, refletindo a complexidade e a imprevisibilidade do mercado. Ao integrar dados hist√≥ricos e aplicar choques aleat√≥rios, ele consegue gerar um espectro de poss√≠veis futuros que s√£o de grande valor para analistas e investidores. A an√°lise resultante √© uma ferramenta poderosa para a avalia√ß√£o de risco, planejamento de investimentos e desenvolvimento de estrat√©gias de hedge no vol√°til setor de energia.')
    
    from mpl_toolkits.mplot3d import Axes3D

    # Selecione um subconjunto das simula√ß√µes para evitar um gr√°fico muito denso
    step = 10  # Isso escolher√° uma em cada 10 simula√ß√µes
    selected_simulations = simulations_df.iloc[:, ::step]

    # Configura√ß√£o do gr√°fico
    fig = plt.figure(figsize=(12, 6))
    ax = fig.add_subplot(111, projection='3d')

    # Dados para o gr√°fico
    xpos = np.arange(selected_simulations.shape[0])
    ypos = np.arange(selected_simulations.shape[1])
    xpos, ypos = np.meshgrid(xpos, ypos)

    xpos = xpos.flatten()
    ypos = ypos.flatten()
    zpos = np.zeros_like(xpos)

    # Altura das barras
    dz = selected_simulations.values.flatten()

    # Largura e profundidade das barras
    dx = dy = 0.8

    # Criando o gr√°fico de barras 3D
    ax.bar3d(xpos, ypos, zpos, dx, dy, dz, color='b', alpha=0.5)

    # R√≥tulos e t√≠tulo
    ax.set_xlabel('Dias')
    ax.set_ylabel('Simula√ß√£o')
    ax.set_zlabel('Pre√ßo Simulado')
    ax.set_title('Distribui√ß√£o dos Pre√ßos do Petr√≥leo ao Longo do Tempo - Simula√ß√£o de Monte Carlo')

    st.pyplot(plt)

    final_prices = simulations_df.iloc[-1, :]

    # Plotar o histograma dos pre√ßos finais
    plt.figure(figsize=(10, 5))
    plt.hist(final_prices, bins=50, alpha=0.7, color='blue')

    # Detalhes do gr√°fico
    plt.title('Distribui√ß√£o dos Pre√ßos Finais do Petr√≥leo - Simula√ß√£o de Monte Carlo')
    plt.xlabel('Pre√ßo Final')
    plt.ylabel('Frequ√™ncia')
    plt.grid(True)

    st.pyplot(plt)
